# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# API
GET    /api/projects/:projectId/results             @controllers.ApiController.getResults(projectId: String, limit: Int ?= 5)
GET    /api/projects/:projectId/:regionId/mutants   @controllers.ApiController.getRegionMutants(projectId: String, regionId: String, limit: Int ?= 5)
GET    /api/projects/:projectId/requests            @controllers.ApiController.getProjectRequests(projectId: String, completed: java.lang.Boolean ?= null)
GET    /api/projects                                @controllers.ApiController.getProjects(page: Int ?=0, limit: Int ?= 10)
POST   /api/projects/new                            @controllers.ApiController.createProject()
POST   /api/projects/mutate                         @controllers.ApiController.projectMutate()

# VIEWS
GET    /projects                                    @controllers.ViewController.viewProjects(page: Int ?=0, limit: Int ?= 10)
GET    /projects/new                                @controllers.ViewController.createProject()
GET    /projects/:projectId                         @controllers.ViewController.viewProject(projectId: String)
GET    /projects/:projectId/mutate                  @controllers.ViewController.projectMutateSetup(projectId: String)
GET    /projects/:projectId/results                 @controllers.ViewController.viewResults(projectId: String, limit: Int ?= 5)
POST   /projects/:projectId/analyzemutant           @controllers.ViewController.analyzeMutant(projectId: String)
GET    /tools/visualize                             @controllers.ViewController.visualizeSequence()
GET    /tools/targetpredict                         @controllers.ViewController.targetPredict()
POST   /tools/targetpredict                         @controllers.ViewController.targetPredictSubmit()
GET    /about                                       @controllers.ViewController.about()
GET    /                                            @controllers.ViewController.index()

# Login page
GET    /login                                       securesocial.controllers.LoginPage.login
GET    /logout                                      securesocial.controllers.LoginPage.logout

# User Registration and password handling 
GET    /signup                                      securesocial.controllers.Registration.startSignUp
POST   /signup                                      securesocial.controllers.Registration.handleStartSignUp
GET    /signup/:token                               securesocial.controllers.Registration.signUp(token)
POST   /signup/:token                               securesocial.controllers.Registration.handleSignUp(token)
GET    /reset                                       securesocial.controllers.Registration.startResetPassword
POST   /reset                                       securesocial.controllers.Registration.handleStartResetPassword
GET    /reset/:token                                securesocial.controllers.Registration.resetPassword(token)
POST   /reset/:token                                securesocial.controllers.Registration.handleResetPassword(token)
GET    /password                                    securesocial.controllers.PasswordChange.page
POST   /password                                    securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET    /authenticate/:provider                      securesocial.controllers.ProviderController.authenticate(provider)
POST   /authenticate/:provider                      securesocial.controllers.ProviderController.authenticateByPost(provider)
GET    /not-authorized                              securesocial.controllers.ProviderController.notAuthorized

# Map static resources from the /public folder to the /assets URL path
GET    /assets/js/routes                            @controllers.ViewController.jsRoutes()
GET    /assets/*file                                controllers.Assets.at(path="/public", file)